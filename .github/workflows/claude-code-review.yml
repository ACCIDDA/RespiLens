name: Claude Code Review

on:
  issue_comment:
    types: [created]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    if: github.event.issue.pull_request && (contains(github.event.comment.body, '@claude')) 
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    
    steps:
      - name: Wait for PR Head to Update # So that the branch has time to fully update on push
        run: sleep 15
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
          fetch-depth: 0 # full clone to get all commits, not just most recent

      - name: Prepare Prompt
        id: prepare_prompt
        # Get the comment body (remove '@claude' mention),
        # Build default prompt,
        # Combine it with the user-provided specific prompt (if it exists),
        # Feed Claude that prompt

        run: |
          PROMPT_TEXT=$(echo "${{ github.event.comment.body }}" | sed -E 's/@claude//i' | xargs)
          
          DEFAULT_PROMPT="In addition to any instructions above, please review this pull request for the following:
          - Code quality and best practices
          - Potential bugs or issues
          - Performance considerations
          - Security concerns
          - Test coverage
          
          Be constructive and helpful in your feedback."
          
          if [[ -n "$PROMPT_TEXT" ]]; then
            FINAL_PROMPT=$(printf "%s\n\n%s" "$PROMPT_TEXT" "$DEFAULT_PROMPT")
          else
            FINAL_PROMPT="$DEFAULT_PROMPT"
          fi
          
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$FINAL_PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT



      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: ${{ steps.prepare_prompt.outputs.prompt }}

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

